package org.snubi.auth.logging;

import java.util.Enumeration;

import javax.servlet.http.HttpServletRequest;

import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.snubi.auth.AuthConst;
import org.snubi.lib.jwt.JTWClaimsUtil;
import org.snubi.lib.jwt.JWTClaims;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import lombok.extern.slf4j.Slf4j;

@Aspect
@Component
@Slf4j
public class LoggerAspect {

	@Autowired(required = true)
	private HttpServletRequest request;

    @Around("within(org.snubi.auth.admin.controller.*)")

    public Object logging(ProceedingJoinPoint pjp) throws Throwable {
    	log.info("####################### >>>>>>>>>>>>>> ");
    	String strHTTPHeader = request.getHeader("authorization").replace(AuthConst.strTokenPrefix, "");
		String strKey = AuthConst.strSecrete;
		JWTClaims clsJWTClaims = (new JTWClaimsUtil()).getClaims(strHTTPHeader,strKey);
		log.info("####################### >>>>>>>>>>>>>> " + clsJWTClaims.getId());
    	Enumeration headerNames = request.getHeaderNames();
    	while(headerNames.hasMoreElements()) {
    	  String headerName = (String)headerNames.nextElement();
    	  System.out.println("" + headerName + ":" + request.getHeader(headerName));
    	}

    	Enumeration<String> params = request.getParameterNames();
    	while(params.hasMoreElements()){
    	 String paramName = params.nextElement();
    	 System.out.println("Parameter Name - "+paramName+", Value - "+request.getParameter(paramName));
    	}

    	 Object result = pjp.proceed();
    	 log.info("####################### >>>>>>>>>>>>>> " + request.getContentLength());
         return result;
    }
    private HttpServletRequest getRequestArgument(ProceedingJoinPoint pjp) {
        for (Object object : pjp.getArgs()) {
            if (object instanceof HttpServletRequest) {
                return (HttpServletRequest) object;
            }
        }
        return null;
    }

}

//
//
//@Component
//@Aspect
//@Slf4j
//public class LoggerAspect {
////	@Pointcut("execution(* org.snubi.*(..))") // 이런 패턴이 실행될 경우 수행
//	@Pointcut("within(org.snubi.auth.admin.cotroller..*)")
//	public void loggerPointCut() {
//		System.out.println("## loggerPointCut ##");
//	}
//
//	@Around("org.snubi.auth.logging.LoggerAspect.loggerPointCut()")
//	public Object methodLogger(ProceedingJoinPoint proceedingJoinPoint) throws Throwable {
//		System.out.println("## methodLogger ##");
//		try {
//			Object result = proceedingJoinPoint.proceed();
//			HttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest(); // request 정보를 가져온다.
//
//			String controllerName = proceedingJoinPoint.getSignature().getDeclaringType().getSimpleName();
//			String methodName = proceedingJoinPoint.getSignature().getName();
//
//			Map<String, Object> params = new HashMap<>();
//
//			try {
//				params.put("controller", controllerName);
//				params.put("method", methodName);
//				params.put("params", getParams(request));
//				params.put("log_time", new Date());
//				params.put("request_uri", request.getRequestURI());
//				params.put("http_method", request.getMethod());
//			} catch (Exception e) {
//				log.error("LoggerAspect error", e);
//			}
//			log.info("params : {}", params); // param에 담긴 정보들을 한번에 로깅한다.
//
//			return result;
//
//		} catch (Throwable throwable) {
//			throw throwable;
//		}
//	}
//
//	/**
//	 * request 에 담긴 정보를 JSONObject 형태로 반환한다.
//	 * @param request
//	 * @return
//	 */
//	private static JSONObject getParams(HttpServletRequest request) {
//		JSONObject jsonObject = new JSONObject();
//		Enumeration<String> params = request.getParameterNames();
//		while (params.hasMoreElements()) {
//			String param = params.nextElement();
//			String replaceParam = param.replaceAll("\\.", "-");
//			jsonObject.put(replaceParam, request.getParameter(param));
//		}
//		return jsonObject;
//	}
//}