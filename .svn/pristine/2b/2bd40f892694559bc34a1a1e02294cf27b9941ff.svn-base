/****************************************************************************************
 * File Name    : AuthMemberServiceImplement.java
 * Function     :
 * Author       : mh.choi
 * Tester       :
 * Page         :
 * Target       :
 * Description  :
 * Modification Log
 * ======================================================================================
 * Ver  Date        Author     Modification
 * ======================================================================================
   1.0  2018.05.15  mh.choi    	Create
   1.1  2016.06.13	최명호		가입시 이메일주소 검사추가
   1.2  2016.07.10	최명호		수정시 이메일은 업데이트 하지 않도록 함
   1.3  2016.07.11	최명호		회원정보 수정시 성별.생년월일.연락처추가
   1.4  2020.09.11	최명호		업데이트항목 추가
****************************************************************************************/
package org.snubi.auth.member.service.implement;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.transaction.Transactional;

import org.snubi.auth.entity.AuthMember;
import org.snubi.auth.entity.AuthMemberAdapter;
import org.snubi.auth.entity.AuthMemberDevice;
import org.snubi.auth.entity.AuthMemberRole;
import org.snubi.auth.entity.AuthMemberSet;
import org.snubi.auth.member.repository.AuthMemberDeviceRepository;
import org.snubi.auth.member.repository.AuthMemberRepository;
import org.snubi.auth.member.repository.AuthMemberRoleRepository;
import org.snubi.auth.member.repository.AuthMemberSetRepository;
import org.snubi.auth.member.service.AuthMemberService;
import org.snubi.lib.code.CodeUtil;
import org.snubi.lib.date.DateUtil;
import org.snubi.lib.misc.Misc;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import lombok.extern.slf4j.Slf4j;

@Service
@Slf4j
public class AuthMemberServiceImplement<T> implements AuthMemberService<T> {
	@Autowired	AuthMemberRepository 		clsAuthMemberRepository			;
	@Autowired	AuthMemberSetRepository 	clsAuthMemberSetRepository		;
	@Autowired	AuthMemberDeviceRepository 	clsAuthMemberDeviceRepository 	;
	@Autowired	AuthMemberRoleRepository 	clsAuthMemberRoleRepository 	;

	@Override
	public boolean save(T clsParameter) throws Exception {
//		FIXME >> 중복로직 수정해야함.
		if(clsParameter.getClass() == AuthMember.class) {
			AuthMember clsAuthMember = (AuthMember)clsParameter;
			boolean isTrue = clsAuthMemberRepository.findOne(clsAuthMember.getId()) == null ? true : false ;
			if(isTrue == true) {
				if(Misc.isEmtyString(clsAuthMember.getPhone()) == true) clsAuthMember.setPhone(clsAuthMember.getMobile());
				if(clsAuthMemberRepository.findByEmail(clsAuthMember.getEmail()) != null) throw new Exception("이미등록한이메일주소가있습니다.");
				if(clsAuthMemberRepository.findByMobile(clsAuthMember.getMobile()) != null) throw new Exception("이미등록한핸드폰번호가가있습니다.");
				return clsAuthMember.getId().equals(clsAuthMemberRepository.save(clsAuthMember).getId());
			} else {
				throw new Exception("이미가입된아이디가있습니다.");
			}
		} else if(clsParameter.getClass() == AuthMemberSet.class) {
			AuthMemberSet clsAuthMemberSet = (AuthMemberSet)clsParameter;
			boolean  isTrue = clsAuthMemberRepository.findOne(clsAuthMemberSet.getId()) == null ? true : false ;
			if(isTrue == true) {
				if(Misc.isEmtyString(clsAuthMemberSet.getPhone()) == true) clsAuthMemberSet.setPhone(clsAuthMemberSet.getMobile());
				if(clsAuthMemberRepository.findByEmail(clsAuthMemberSet.getEmail()) != null) throw new Exception("이미등록한이메일주소가있습니다.");
				if(clsAuthMemberRepository.findByMobile(clsAuthMemberSet.getMobile()) != null) throw new Exception("이미등록한핸드폰번호가가있습니다.");
				return clsAuthMemberSet.getId().equals(clsAuthMemberSetRepository.save(clsAuthMemberSet).getId());
			} else {
				throw new Exception("이미가입된아이디가있습니다.");
			}
		}
		return false;
	}
	@Override
	public boolean update(T clsParameter) throws Exception {
		if(clsParameter.getClass() == AuthMember.class) {
			AuthMember clsAuthMember = (AuthMember) clsParameter;
			boolean isTrue = clsAuthMemberRepository.findOne(clsAuthMember.getId()) == null ? false : true ;
//			TODO >> 최명호 : 왜 반대로 되어 있지 ?
//			boolean isTrue = clsAuthMemberRepository.findOne(clsAuthMember.getId()) == null ? true : false ;
			System.out.println(isTrue);
			if(isTrue == true) {
				return clsAuthMember.getId().equals(clsAuthMemberRepository.save(clsAuthMember).getId());
			}
			return isTrue;

		} else if(clsParameter.getClass() == AuthMemberSet.class) {
//			TODO >> 관리자 기능이 추가된다면, 설정된 권한을 수정할 수 있어야 한다.
			AuthMemberSet clsAuthMemberSet = (AuthMemberSet)clsParameter;
			boolean isThere = clsAuthMemberRepository.findById(clsAuthMemberSet.getId()) == null ? false : true ;
			if(isThere == true) {
//				DESC >> 특정항목만 업데이트 되도록 한다.
				clsAuthMemberRepository.updateByQuery(clsAuthMemberSet.getId()
													 ,clsAuthMemberSet.getName()
													 ,clsAuthMemberSet.getPassword()
													 ,clsAuthMemberSet.getCryptographicAlgorithm()
													 ,clsAuthMemberSet.getBirth()
													 ,clsAuthMemberSet.getPhone()
													 ,clsAuthMemberSet.getGenderCode()
													 ,clsAuthMemberSet.getId()
													 ,DateUtil.getThisDate());
//				DESC >> 디바이스정보를 업데이트한다.
				List<AuthMemberDevice> listAuthMemberDevice = new ArrayList<AuthMemberDevice>();
				for(AuthMemberDevice clsAuthMemberDevice : clsAuthMemberSet.getListAuthMemberDevice()) {
					AuthMemberDevice clsAuthMemberDeviceToPersist = clsAuthMemberDeviceRepository.findByIdAndOsCodeAndSystemCodeAndSystemTypeCode(clsAuthMemberSet.getId(),clsAuthMemberDevice.getOsCode(),clsAuthMemberDevice.getSystemCode(),clsAuthMemberDevice.getSystemTypeCode());
					if(clsAuthMemberDeviceToPersist != null) {
						clsAuthMemberDeviceToPersist.setDeviceId(clsAuthMemberDevice.getDeviceId());
						clsAuthMemberDeviceToPersist.setSystemTypeVersion(clsAuthMemberDevice.getSystemTypeVersion());
					} else {
						clsAuthMemberDeviceToPersist = AuthMemberDevice.builder()
								.id(clsAuthMemberSet.getId())
								.mobile(clsAuthMemberSet.getMobile())
								.deviceId(clsAuthMemberDevice.getDeviceId())
								.osCode(clsAuthMemberDevice.getOsCode())
								.systemCode(clsAuthMemberDevice.getSystemCode())
								.systemTypeCode(clsAuthMemberDevice.getSystemTypeCode())
								.systemTypeVersion(clsAuthMemberDevice.getSystemTypeVersion())
								.build();
					}
					log.info("save device [{}]",clsAuthMemberDeviceToPersist);
					listAuthMemberDevice.add(clsAuthMemberDeviceToPersist);
				}
				int totalToSave = listAuthMemberDevice.size();
				log.info("save devices [{}] case(s)",totalToSave);
				if(totalToSave > 0) {
					return ((List<AuthMemberDevice>)clsAuthMemberDeviceRepository.save(listAuthMemberDevice)).size() == totalToSave;
				}
			}
			return isThere;
		}
		return false;
	}
	@Override
	@Transactional
	public boolean delete(T clsParameter) throws Exception {
		if(clsParameter.getClass() == AuthMember.class) {
			AuthMember clsAuthMember = (AuthMember)clsParameter;
			String strDeleteFlag = CodeUtil.get("bioemr-activate-deleted").getStrCode();
			clsAuthMember.setValid(strDeleteFlag);
			return strDeleteFlag.equals(clsAuthMemberRepository.save(clsAuthMember).getValid());
		}
		else if(clsParameter.getClass() == AuthMemberSet.class) {
			AuthMemberSet clsAuthMemberSet = (AuthMemberSet)clsParameter;
			AuthMemberSet clsAuthMemberSetDB = clsAuthMemberSetRepository.findOne(clsAuthMemberSet.getId());
			String strDeleteFlag = CodeUtil.get("bioemr-activate-deleted").getStrCode();
			boolean isTrue = false;
			for(AuthMemberDevice clsAuthMemberDevice : clsAuthMemberSetDB.getListAuthMemberDevice()) {
				clsAuthMemberDevice.setValid(strDeleteFlag);
				isTrue = strDeleteFlag.equals(clsAuthMemberDeviceRepository.save(clsAuthMemberDevice).getValid());
			}
			for(AuthMemberRole clsAuthMemberRole : clsAuthMemberSetDB.getListAuthMemberRole()) {
				clsAuthMemberRole.setValid(strDeleteFlag);
				isTrue = strDeleteFlag.equals(clsAuthMemberRoleRepository.save(clsAuthMemberRole).getValid());
			}
			AuthMemberAdapter clsAuthMemberAdapter = new AuthMemberAdapter();
			AuthMember clsAuthMember = clsAuthMemberAdapter.authMemberAdapter(clsAuthMemberSet);

			clsAuthMemberRepository.save(clsAuthMember);
			clsAuthMemberRoleRepository.save(clsAuthMemberSet.getListAuthMemberRole());
			clsAuthMemberDeviceRepository.save(clsAuthMemberSet.getListAuthMemberDevice());
			return isTrue;
		}
		return false;
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	@Override
	public Page<AuthMemberSet> list(T clsParameter) throws Exception {
		Map<String,Object> mapParameter = (HashMap)clsParameter;
		Pageable pageRequest = (Pageable) mapParameter.get("pageRequest");
		String strOrganization = (String) mapParameter.get("organization");
		String strDepartment = (String) mapParameter.get("department");
		Page<AuthMemberSet> pageAuthMemberSet = clsAuthMemberSetRepository.findAllByOrganizationCodeAndDepartmentCode(pageRequest,strOrganization,strDepartment);
		return (Page<AuthMemberSet>) pageAuthMemberSet;
	}
}
