/****************************************************************************************
 * File Name    : AuthMember.java
 * Function     :
 * Author       : mh.choi
 * Tester       :
 * Page         :
 * Target       :
 * Description  : 참고할 내용
				: https://stackoverflow.com/questions/4334970/hibernate-cannot-simultaneously-fetch-multiple-bags?utm_medium=organic&utm_source=google_rich_qa&utm_campaign=google_rich_qa
				: -
				: I think a newer version of hibernate (supporting JPA 2.0) should handle this.
				: But otherwise you can work it around by annotating the collection fields with:
				: @LazyCollection(LazyCollectionOption.FALSE)
				: Remember to remove the fetchType attribute from the @*ToMany annotation.
				: But note that in most cases a Set<Child> is more appropriate than List<Child>,
				: so unless you really need a List - go for Set
				: +
				: the problem is that the JPA annotations are parsed not to allow more than 2 eagerly loaded collection.
				: But the hibernate-specific annnotations allow it.
 * Modification Log
 * ===============================================================
 * Ver  Date        Author     Modification
 * ===============================================================
   1.0  2018.04.06  mh.choi    Create
****************************************************************************************/
package org.snubi.auth.entity;

import java.sql.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.Transient;

import org.hibernate.annotations.CreationTimestamp;
import org.snubi.auth.AuthConst;
import org.snubi.lib.crypto.AES256Util;

import lombok.Getter;
import lombok.Setter;
import lombok.ToString;

@SuppressWarnings("serial")
@Getter
@Setter
@Entity
@ToString
//@Table(name = "tb_auth_member",schema="auth")
@Table(name = "tb_auth_member")
public class AuthMember extends CommonTrack {

	@Id
	@Column(nullable = false, name = "id")
	private String id;

	@Column(nullable = false, name = "organization_code")
	private String organizationCode;

	@Column(nullable = false, name = "department_code")
	private String departmentCode;

	@Column(nullable = true, name = "title_code")
	private String titleCode;

	@Column(nullable = true, name = "gender_code")
	private String genderCode;

	@Column(nullable = false, name = "membership_code")
	private String membershipCode;

	@Column(nullable = false, name = "password")
	private String password;

	@Column(nullable = false, name = "name")
	private String name;

	@Column(nullable = false, name = "email")
	private String email;

	@Column(nullable = true, name = "birth")
	@CreationTimestamp
	private Date birth;

	@Column(nullable = true, name = "phone")
	private String phone;

	@Column(nullable = true, name = "mobile")
	private String mobile;

	@Transient
	long count;

	public AuthMember(String id, String organizationCode, String departmentCode) {
		this.id = id;
		this.organizationCode = organizationCode;
		this.departmentCode = departmentCode;
	}
	public AuthMember() {}
	public void encode() {
		try {
			AES256Util clsAES256Util = new AES256Util(AuthConst.strAES256Key);
			this.name 		= clsAES256Util.aesEncode(this.name);
			this.password 	= clsAES256Util.aesEncode(this.password);
		} catch(Exception Ex) {

		}
	}
	public void decode() throws Exception {
		try {
			AES256Util clsAES256Util = new AES256Util(AuthConst.strAES256Key);
			this.name 		= clsAES256Util.aesDecode(this.name);
			this.password 	= clsAES256Util.aesDecode(this.password);
		} catch(Exception Ex) {

		}
	}
}
